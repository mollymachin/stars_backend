name: Azure Container App Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.STARS_PAT }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository_owner }}/stars-backend
        tags: |
          type=ref,event=branch
          type=sha,format=short
          type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        platforms: linux/amd64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Azure Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          # First, verify our variables
          RG="${{ secrets.AZURE_RESOURCE_GROUP }}"
          LOCATION="${{ secrets.AZURE_LOCATION }}"
          ENV_NAME="${{ secrets.AZURE_CONTAINER_ENV }}"
          APP_NAME="${{ secrets.AZURE_CONTAINER_APP }}"
          
          # Debug output
          echo "Resource Group: $RG"
          echo "Location: $LOCATION"
          echo "Environment Name: $ENV_NAME"
          echo "App Name: $APP_NAME"
          
          # Verify required variables are set
          if [ -z "$RG" ]; then
            echo "Error: AZURE_RESOURCE_GROUP is not set"
            exit 1
          fi
          
          if [ -z "$LOCATION" ]; then
            echo "Error: AZURE_LOCATION is not set"
            exit 1
          fi
          
          # Get the first image tag
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n 1)
          echo "Using image: $IMAGE_TAG"
          
          # Check if resource group exists
          echo "Checking resource group '$RG'..."
          if az group exists --name "$RG"; then
            echo "Resource group '$RG' exists"
          else
            echo "Creating resource group '$RG' in '$LOCATION'..."
            az group create --name "$RG" --location "$LOCATION"
          fi
          
          # Check if container app environment exists
          echo "Checking container app environment '$ENV_NAME'..."
          if az containerapp env show --name "$ENV_NAME" --resource-group "$RG" --query "name" -o tsv 2>/dev/null; then
            echo "Container app environment exists"
          else
            echo "Creating container app environment..."
            az containerapp env create \
              --name "$ENV_NAME" \
              --resource-group "$RG" \
              --location "$LOCATION"
          fi
          
          # Check if container app exists
          echo "Checking if container app '$APP_NAME' exists..."
          if az containerapp show --name "$APP_NAME" --resource-group "$RG" --query "name" -o tsv 2>/dev/null; then
            echo "Updating existing container app..."
            az containerapp update \
              --name "$APP_NAME" \
              --resource-group "$RG" \
              --image "$IMAGE_TAG" \
              --set-env-vars \
                "ENVIRONMENT=production" \
                "PORT=8080" \
                "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                "REDIS_HOST=${{ secrets.REDIS_HOST }}" \
                "REDIS_PORT=${{ secrets.REDIS_PORT }}" \
                "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
                "REDIS_SSL=true" \
                "API_CORS_ORIGINS=${{ secrets.API_CORS_ORIGINS }}" \
                "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}"
          else
            echo "Creating new container app..."
            az containerapp create \
              --name "$APP_NAME" \
              --resource-group "$RG" \
              --environment "$ENV_NAME" \
              --image "$IMAGE_TAG" \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 0.5 \
              --memory 1.0Gi \
              --env-vars \
                "ENVIRONMENT=production" \
                "PORT=8080" \
                "AZURE_STORAGE_CONNECTION_STRING=${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                "REDIS_HOST=${{ secrets.REDIS_HOST }}" \
                "REDIS_PORT=${{ secrets.REDIS_PORT }}" \
                "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" \
                "REDIS_SSL=true" \
                "API_CORS_ORIGINS=${{ secrets.API_CORS_ORIGINS }}" \
                "ADMIN_API_KEY=${{ secrets.ADMIN_API_KEY }}"
          fi
          
          # Output the container app URL
          echo "Getting container app URL..."
          APP_URL=$(az containerapp show --name "$APP_NAME" --resource-group "$RG" --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "Container App URL: $APP_URL"